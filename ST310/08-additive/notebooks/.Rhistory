knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(modelr)
theme_set(theme_minimal(base_size = 14))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(modelr)
theme_set(theme_minimal(base_size = 14))
set.seed(1) # change this
f1 <- function(x) -1 + 2*x + x^2
f2 <- function(x) sin(pi*x)
f3 <- function(x) -1.2 * x
n <- 1000
df <- data.frame(
x1 = 2*(runif(n)-1/2),
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3)
) |>
mutate(
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y)) # center outcome
View(df)
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
#    y = x1 * x2^2  +
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(modelr)
library(gam)
install.packages("gam")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(modelr)
library(gam)
theme_set(theme_minimal(base_size = 14))
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
#    y = x1 * x2^2  +
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
p1 <- partial_plot(1) + ylab("y")
# partial_predict(j,df, obj): predict on the j-th variable in the df by using 'obj'(some model)
partial_predict <- function(j, df, obj) {
xj <- paste0("x", j)
newdf <- df |>
mutate(across(starts_with("x") & -xj, mean))
predict(obj, newdata = newdf)
}
# plot y vs xj
partial_plot <- function(j) {
xj <- paste0("x", j)
fj <- paste0("f", j)
ggplot(df, aes(get(xj), y)) +
geom_point(alpha = .5) +
geom_smooth() +   #estimation by smoothing (usually loess)
geom_line(aes(y = partial_predict(j, df, fit_gam)), color = "red") + #estimation by gam
xlab(xj) + ylab("") +
geom_function(fun = get(fj),
size = 1,
color = "green") + #true function
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
#    y = x1 * x2^2  +
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
p1 <- partial_plot(1) + ylab("y")
p2 <- partial_plot(2)
p3 <- partial_plot(3)
p1 + p2 + p3
# partial_predict(j,df, obj): predict on the j-th variable in the df by using 'obj'(some model)
partial_predict <- function(j, df, obj) {
xj <- paste0("x", j)
newdf <- df |>
mutate(across(starts_with("x") & -xj, mean))
predict(obj, newdata = newdf)
}
# plot y vs xj
partial_plot <- function(j) {
xj <- paste0("x", j)
fj <- paste0("f", j)
ggplot(df, aes(get(xj), y)) +
geom_point(alpha = .5) +
geom_smooth() +   #estimation by smoothing (usually loess)
geom_line(aes(y = partial_predict(j, df, fit_gam)), color = "red") + #estimation by gam
xlab(xj) + ylab("") +
geom_function(fun = get(fj),
linewidth = 1,
color = "green") + #true function
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
#    y = x1 * x2^2  +
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
p1 <- partial_plot(1) + ylab("y")
p2 <- partial_plot(2)
p3 <- partial_plot(3)
p1 + p2 + p3
set.seed(1) # change this
f1 <- function(x) -1 + 2*x + x^2
f2 <- function(x) sin(pi*x)
f3 <- function(x) -1.2 * x
n <- 1000
df <- data.frame(
x1 = 2*(runif(n)-1/2),
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3)
) |>
mutate(
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y)) # center outcome
library(gam)
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
par(mfrow = c(1, 3))
plot(fit_gam)
library(plotmo)
# partial_predict(j,df, obj): predict on the j-th variable in the df by using 'obj'(some model)
partial_predict <- function(j, df, obj) {
xj <- paste0("x", j)
newdf <- df |>
mutate(across(starts_with("x") & -xj, mean))
predict(obj, newdata = newdf)
}
# plot y vs xj
partial_plot <- function(j) {
xj <- paste0("x", j)
fj <- paste0("f", j)
ggplot(df, aes(get(xj), y)) +
geom_point(alpha = .5) +
geom_smooth() +   #estimation by smoothing (usually loess)
geom_line(aes(y = partial_predict(j, df, fit_gam)), color = "red") + #estimation by gam
xlab(xj) + ylab("") +
geom_function(fun = get(fj),
linewidth = 1,
color = "green") + #true function
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
p1 <- partial_plot(1) + ylab("y")
p2 <- partial_plot(2)
p3 <- partial_plot(3)
library(patchwork)
p1 + p2 + p3
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
#    y = x1 * x2^2  +
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
p1 <- partial_plot(1) + ylab("y")
p2 <- partial_plot(2)
p3 <- partial_plot(3)
p1 + p2 + p3
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
y = f1(x1) * f2(x2)  + f3(x3)+rnorm(n, sd = 1)
#y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
p1 <- partial_plot(1) + ylab("y")
p2 <- partial_plot(2)
p3 <- partial_plot(3)
p1 + p2 + p3
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
y = y = x1 * x2^2 + log(abs(x3 + 1)) + rnorm(n, sd = 1)
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
y = x1 * x2^2 + log(abs(x3 + 1)) + rnorm(n, sd = 1)
#y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
p1 <- partial_plot(1) + ylab("y")
p2 <- partial_plot(2)
p3 <- partial_plot(3)
p1 + p2 + p3
n <- 1000
confounder <- rnorm(n, sd = 1.5)
df <- data.frame(
x1 = 2*(runif(n)-1/2) + confounder,
x2 = sample(1:100 / 50,  n, replace = TRUE),
x3 = 2*rbeta(n, 1, 3) + confounder
) |>
mutate(
#y = x1 * x2^2 + log(abs(x3 + 1)) + rnorm(n, sd = 1)
y = f1(x1) + f2(x2) + f3(x3) + rnorm(n, sd = 1)
) |> mutate(y = y - mean(y))
fit_gam <- gam(y ~ lo(x1) + lo(x2) + lo(x3), data = df)
p1 <- partial_plot(1) + ylab("y")
p2 <- partial_plot(2)
p3 <- partial_plot(3)
p1 + p2 + p3
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(modelr)
library(gam)
library(plotmo)
install.packages("plotmo")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(modelr)
library(gam)
library(plotmo)
theme_set(theme_minimal(base_size = 14))
